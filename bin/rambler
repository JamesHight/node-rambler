#!/usr/bin/env node

var optimist = require('optimist'),
	dns = require('dns'),
	net = require('net'),
	fs = require('fs'),
	util = require('util'),
	SpiderWeb = require('spiderweb'),
	dnsLookup = dns.lookup,
	urls = [],
	domains = [],
	excludeUrls = [],
	argv = require('optimist')
			.usage('Usage: $0 -u [url]')
			.demand(['u'])
			.describe('u', 'url to crawl')
			.alias ('url', 'u')
			.describe('e', 'exclude url, supports "*" wild card')
			.alias('exclude', 'e')
			.describe('d', 'override the ip of a domain, format is "domain:ip"')
			.alias ('domain', 'd')
			.describe('t', 'timeout in seconds, default is 60')
			.alias('timeout', 't')
			.describe('o', 'Output file')
			.alias('output', 'o')
			.describe('h', 'help, show this message')
			.alias ('help', 'h')
			.argv,
	options = {
		excludeNoFollow: false
	};


if (argv.h) {
	help();
}

init();
run();

/**
 * Override DNS Lookup
 **/
if (domains.length) {
	dns.lookup = function(domain, family, callback) {
		var i;

		if (arguments.length === 2) {
			callback = family;
			family = 0;
		} 
		else if (!family) {
			family = 0;
		} 
		else {
			family = +family;
			if (family !== 4 && family !== 6) {
				throw new Error('invalid argument: `family` must be 4 or 6');
			}
		}

		for (i = 0; i < domains.length; i++) {
			if (domain.match(domains[i].domain) 
				&& ((family !== 4 && family !== 6) 
					 || domains[i].family === family)) {
				if (callback) {
					return callback(null, domains[i].ip, family);
				}			
			}
		}

		return dnsLookup.call(this, domain, family, callback);
	}
}


function init() {
	var domain, d, u, i,
		excludeUrls;

	d = argv.d;
	if (d) {
		if (!Array.isArray(d)) {
			d = [d];
		}

		for (i = 0; i < d.length; i++) {
			domain = d[i].split(':');

			if (domain.length !== 2) {
				console.log('Invalid DNS argument: ' + d[i]);
				help();
			}

			domain = {
				domain:domain[0],
				ip: domain[1]
			};

			if (net.isIPv4(domain.ip)) {
				domain.family = 4;
			}
			else if (net.isIPv6(domain.ip)) {
				domain.family = 6;
			}
			else {
				console.log('Invalid ip: ' + domain.ip);
				help();
			}

			domains.push(domain);
		}
	}

	u = argv.u;

	if (u) {
		if (!Array.isArray(u)) {
			u = [u];
		}

		urls = u;
	}

	if (!urls || !urls.length) {
		help();
	}

	if (argv.e) {
		excludeUrls = argv.e;
		if (!Array.isArray(excludeUrls)) {
			excludeUrls = [excludeUrls];
		}

		options.excludeUrls = excludeUrls;
	}

	if (argv.t) {
		options.timeout = parseFloat(argv.t) * 1000;
	}
}

function run() {
	var spider = new SpiderWeb(urls, options);
	spider.start(function(err, log) {
		var file, url;

		if (log.length) {
			console.log('DONE: ' + log.length + ' errors');
			if (argv.o) {
				fs.writeFileSync(argv.o, util.inspect(log, false, 10));
			}
			else {
				console.log(util.inspect(log, false, 10));	
			}
		}
		else {
			console.log('DONE: no errors');
		}
	});

	spider.pageHandler = function(err, resp, body, entry) {		
		console.log(entry.url);
		
		SpiderWeb.prototype.pageHandler.apply(this, arguments);
	}
}

function help() {
	optimist.showHelp(console.log);
	process.exit();
}